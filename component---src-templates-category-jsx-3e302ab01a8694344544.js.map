{"version":3,"sources":["webpack:///./node_modules/react-md/lib/Media/index.js","webpack:///./src/templates/category.jsx","webpack:///./src/components/PostPreview/index.jsx","webpack:///./src/components/PostListing/index.jsx"],"names":["exports","__esModule","MediaOverlay","Media","undefined","_Media3","_interopRequireDefault","_MediaOverlay3","obj","default","CategoryTemplate","render","category","this","props","pageContext","postEdges","data","allMarkdownRemark","edges","location","title","charAt","toUpperCase","slice","className","config","siteTitle","rel","href","siteUrl","React","Component","pageQuery","PostPreview","state","mobile","handleResize","bind","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","innerWidth","setState","postInfo","expand","coverHeight","key","path","raise","style","textDecoration","to","height","paddingBottom","PostCover","postNode","raised","secondary","expander","avatar","icon","iconClassName","moment","date","format","dateFormat","subtitle","timeToRead","expandable","excerpt","PostTags","tags","PostListing","getPostList","postList","forEach","postEdge","push","node","fields","slug","frontmatter","cover","map","post"],"mappings":"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","file":"component---src-templates-category-jsx-3e302ab01a8694344544.js","sourcesContent":["'use strict';\n\nexports.__esModule = true;\nexports.MediaOverlay = exports.Media = undefined;\n\nvar _Media2 = require('./Media');\n\nvar _Media3 = _interopRequireDefault(_Media2);\n\nvar _MediaOverlay2 = require('./MediaOverlay');\n\nvar _MediaOverlay3 = _interopRequireDefault(_MediaOverlay2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nexports.default = _Media3.default;\nexports.Media = _Media3.default;\nexports.MediaOverlay = _MediaOverlay3.default;","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { graphql } from \"gatsby\";\nimport PostListing from \"../components/PostListing\";\nimport Layout from \"../layout\";\nimport config from \"../../data/SiteConfig\";\n\nexport default class CategoryTemplate extends React.Component {\n  render() {\n    const { category } = this.props.pageContext;\n    const postEdges = this.props.data.allMarkdownRemark.edges;\n    return (\n      <Layout\n        location={this.props.location}\n        title={category.charAt(0).toUpperCase() + category.slice(1)}\n      >\n        <div className=\"category-container\">\n          <Helmet>\n            <title>\n              {`Posts in category \"${category}\" | ${config.siteTitle}`}\n            </title>\n            <link\n              rel=\"canonical\"\n              href={`${config.siteUrl}/categories/${category}`}\n            />\n          </Helmet>\n          <PostListing postEdges={postEdges} />\n        </div>\n      </Layout>\n    );\n  }\n}\n\nexport const pageQuery = graphql`\n  query CategoryPage($category: String) {\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [fields___date], order: DESC }\n      filter: { frontmatter: { category: { eq: $category } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n            date\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover\n            date\n          }\n        }\n      }\n    }\n  }\n`;\n","import React, { Component } from \"react\";\nimport Card from \"react-md/lib/Cards/Card\";\nimport CardTitle from \"react-md/lib/Cards/CardTitle\";\nimport Button from \"react-md/lib/Buttons\";\nimport Avatar from \"react-md/lib/Avatars\";\nimport CardText from \"react-md/lib/Cards/CardText\";\nimport FontIcon from \"react-md/lib/FontIcons\";\nimport { Link } from \"gatsby\";\nimport moment from \"moment\";\nimport Media, { MediaOverlay } from \"react-md/lib/Media\";\nimport PostTags from \"../PostTags\";\nimport PostCover from \"../PostCover\";\nimport config from \"../../../data/SiteConfig\";\nimport \"./PostPreview.scss\";\n\nclass PostPreview extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mobile: true\n    };\n    this.handleResize = this.handleResize.bind(this);\n  }\n  componentDidMount() {\n    this.handleResize();\n    window.addEventListener(\"resize\", this.handleResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  }\n\n  handleResize() {\n    if (window.innerWidth >= 640) {\n      this.setState({ mobile: false });\n    } else {\n      this.setState({ mobile: true });\n    }\n  }\n  render() {\n    const { postInfo } = this.props;\n    const { mobile } = this.state;\n    const expand = mobile;\n    /* eslint no-undef: \"off\" */\n    const coverHeight = mobile ? 162 : 225;\n    return (\n      <Card key={postInfo.path} raise className=\"md-grid md-cell md-cell--12\">\n        <Link style={{ textDecoration: \"none\" }} to={postInfo.path}>\n          <Media style={{ height: coverHeight, paddingBottom: \"0px\" }}>\n            <PostCover postNode={postInfo} coverHeight={coverHeight} />\n            <MediaOverlay>\n              <CardTitle title={postInfo.title}>\n                <Button raised secondary className=\"md-cell--right\">\n                  Read\n                </Button>\n              </CardTitle>\n            </MediaOverlay>\n          </Media>\n        </Link>\n        <CardTitle\n          expander={expand}\n          avatar={<Avatar icon={<FontIcon iconClassName=\"fa fa-calendar\" />} />}\n          title={`Published on ${moment(postInfo.date).format(\n            config.dateFormat\n          )}`}\n          subtitle={`${postInfo.timeToRead} min read`}\n        />\n\n        <CardText expandable={expand}>\n          {postInfo.excerpt}\n          <PostTags tags={postInfo.tags} />\n        </CardText>\n      </Card>\n    );\n  }\n}\n\nexport default PostPreview;\n","import React from \"react\";\nimport PostPreview from \"../PostPreview\";\n\nclass PostListing extends React.Component {\n  getPostList() {\n    const postList = [];\n    this.props.postEdges.forEach(postEdge => {\n      postList.push({\n        path: postEdge.node.fields.slug,\n        tags: postEdge.node.frontmatter.tags,\n        cover: postEdge.node.frontmatter.cover,\n        title: postEdge.node.frontmatter.title,\n        date: postEdge.node.fields.date,\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead\n      });\n    });\n    return postList;\n  }\n  render() {\n    const postList = this.getPostList();\n    return (\n      <div className=\"md-grid md-grid--no-spacing md-cell--middle\">\n        <div className=\"md-grid md-cell--8 mobile-fix\">\n          {postList.map(post => (\n            <PostPreview key={post.title} postInfo={post} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PostListing;\n"],"sourceRoot":""}