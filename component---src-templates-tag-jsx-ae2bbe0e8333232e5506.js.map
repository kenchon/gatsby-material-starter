{"version":3,"sources":["webpack:///./src/templates/tag.jsx","webpack:///./node_modules/react-md/lib/Media/index.js","webpack:///./src/components/PostPreview/index.jsx","webpack:///./src/components/PostListing/index.jsx"],"names":["TagTemplate","render","tag","this","props","pageContext","postEdges","data","allMarkdownRemark","edges","location","title","charAt","toUpperCase","slice","className","config","siteTitle","rel","href","siteUrl","React","Component","pageQuery","exports","__esModule","MediaOverlay","Media","undefined","_Media3","_interopRequireDefault","_MediaOverlay3","obj","default","PostPreview","state","mobile","handleResize","bind","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","innerWidth","setState","postInfo","expand","coverHeight","key","path","raise","style","textDecoration","to","height","paddingBottom","PostCover","postNode","raised","secondary","expander","avatar","icon","iconClassName","moment","date","format","dateFormat","subtitle","timeToRead","expandable","excerpt","PostTags","tags","PostListing","getPostList","postList","forEach","postEdge","push","node","fields","slug","frontmatter","cover","map","post"],"mappings":"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","file":"component---src-templates-tag-jsx-ae2bbe0e8333232e5506.js","sourcesContent":["import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../layout\";\nimport PostListing from \"../components/PostListing\";\nimport config from \"../../data/SiteConfig\";\n\nexport default class TagTemplate extends React.Component {\n  render() {\n    const { tag } = this.props.pageContext;\n    const postEdges = this.props.data.allMarkdownRemark.edges;\n\n    return (\n      <Layout\n        location={this.props.location}\n        title={`Tagged in ${tag.charAt(0).toUpperCase() + tag.slice(1)}`}\n      >\n        <div className=\"tag-container\">\n          <Helmet>\n            <title>{`Posts tagged as \"${tag}\" | ${config.siteTitle}`}</title>\n            <link rel=\"canonical\" href={`${config.siteUrl}/tags/${tag}`} />\n          </Helmet>\n          <PostListing postEdges={postEdges} />\n        </div>\n      </Layout>\n    );\n  }\n}\n\nexport const pageQuery = graphql`\n  query TagPage($tag: String) {\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [fields___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n            date\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover\n            date\n          }\n        }\n      }\n    }\n  }\n`;\n","'use strict';\n\nexports.__esModule = true;\nexports.MediaOverlay = exports.Media = undefined;\n\nvar _Media2 = require('./Media');\n\nvar _Media3 = _interopRequireDefault(_Media2);\n\nvar _MediaOverlay2 = require('./MediaOverlay');\n\nvar _MediaOverlay3 = _interopRequireDefault(_MediaOverlay2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nexports.default = _Media3.default;\nexports.Media = _Media3.default;\nexports.MediaOverlay = _MediaOverlay3.default;","import React, { Component } from \"react\";\nimport Card from \"react-md/lib/Cards/Card\";\nimport CardTitle from \"react-md/lib/Cards/CardTitle\";\nimport Button from \"react-md/lib/Buttons\";\nimport Avatar from \"react-md/lib/Avatars\";\nimport CardText from \"react-md/lib/Cards/CardText\";\nimport FontIcon from \"react-md/lib/FontIcons\";\nimport { Link } from \"gatsby\";\nimport moment from \"moment\";\nimport Media, { MediaOverlay } from \"react-md/lib/Media\";\nimport PostTags from \"../PostTags\";\nimport PostCover from \"../PostCover\";\nimport config from \"../../../data/SiteConfig\";\nimport \"./PostPreview.scss\";\n\nclass PostPreview extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mobile: true\n    };\n    this.handleResize = this.handleResize.bind(this);\n  }\n  componentDidMount() {\n    this.handleResize();\n    window.addEventListener(\"resize\", this.handleResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  }\n\n  handleResize() {\n    if (window.innerWidth >= 640) {\n      this.setState({ mobile: false });\n    } else {\n      this.setState({ mobile: true });\n    }\n  }\n  render() {\n    const { postInfo } = this.props;\n    const { mobile } = this.state;\n    const expand = mobile;\n    /* eslint no-undef: \"off\" */\n    const coverHeight = mobile ? 162 : 225;\n    return (\n      <Card key={postInfo.path} raise className=\"md-grid md-cell md-cell--12\">\n        <Link style={{ textDecoration: \"none\" }} to={postInfo.path}>\n          <Media style={{ height: coverHeight, paddingBottom: \"0px\" }}>\n            <PostCover postNode={postInfo} coverHeight={coverHeight} />\n            <MediaOverlay>\n              <CardTitle title={postInfo.title}>\n                <Button raised secondary className=\"md-cell--right\">\n                  Read\n                </Button>\n              </CardTitle>\n            </MediaOverlay>\n          </Media>\n        </Link>\n        <CardTitle\n          expander={expand}\n          avatar={<Avatar icon={<FontIcon iconClassName=\"fa fa-calendar\" />} />}\n          title={`Published on ${moment(postInfo.date).format(\n            config.dateFormat\n          )}`}\n          subtitle={`${postInfo.timeToRead} min read`}\n        />\n\n        <CardText expandable={expand}>\n          {postInfo.excerpt}\n          <PostTags tags={postInfo.tags} />\n        </CardText>\n      </Card>\n    );\n  }\n}\n\nexport default PostPreview;\n","import React from \"react\";\nimport PostPreview from \"../PostPreview\";\n\nclass PostListing extends React.Component {\n  getPostList() {\n    const postList = [];\n    this.props.postEdges.forEach(postEdge => {\n      postList.push({\n        path: postEdge.node.fields.slug,\n        tags: postEdge.node.frontmatter.tags,\n        cover: postEdge.node.frontmatter.cover,\n        title: postEdge.node.frontmatter.title,\n        date: postEdge.node.fields.date,\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead\n      });\n    });\n    return postList;\n  }\n  render() {\n    const postList = this.getPostList();\n    return (\n      <div className=\"md-grid md-grid--no-spacing md-cell--middle\">\n        <div className=\"md-grid md-cell--8 mobile-fix\">\n          {postList.map(post => (\n            <PostPreview key={post.title} postInfo={post} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PostListing;\n"],"sourceRoot":""}