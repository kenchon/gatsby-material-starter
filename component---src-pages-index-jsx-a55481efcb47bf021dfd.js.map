{"version":3,"sources":["webpack:///./src/components/SEO/index.jsx","webpack:///./src/pages/index.jsx","webpack:///./node_modules/url-join/lib/url-join.js","webpack:///./node_modules/react-md/lib/Media/index.js","webpack:///./src/components/PostPreview/index.jsx","webpack:///./src/components/PostListing/index.jsx"],"names":["SEO","render","title","description","image","postURL","this","props","postNode","postPath","postSEO","postMeta","frontmatter","excerpt","cover","urljoin","config","siteUrl","pathPrefix","siteTitle","siteDescription","siteLogo","getImagePath","imageURI","match","datePublished","date","moment","dateFromFormat","toDate","authorJSONLD","name","userName","email","userEmail","address","userLocation","logoJSONLD","url","blogURL","schemaOrgJSONLD","alternateName","siteTitleAlt","push","itemListElement","position","item","headline","author","publisher","logo","content","type","JSON","stringify","property","siteFBAppID","userTwitter","Component","Index","postEdges","data","allMarkdownRemark","edges","location","className","rel","href","React","pageQuery","definition","normalize","strArray","resultArray","length","TypeError","first","shift","replace","i","component","str","join","parts","split","arguments","slice","call","module","exports","__esModule","MediaOverlay","Media","undefined","_Media3","_interopRequireDefault","_MediaOverlay3","obj","default","PostPreview","state","mobile","handleResize","bind","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","innerWidth","setState","postInfo","expand","coverHeight","key","path","raise","style","textDecoration","to","height","paddingBottom","PostCover","raised","secondary","expander","avatar","icon","iconClassName","format","dateFormat","subtitle","timeToRead","expandable","PostTags","tags","PostListing","getPostList","postList","forEach","postEdge","node","fields","slug","map","post"],"mappings":"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","file":"component---src-pages-index-jsx-a55481efcb47bf021dfd.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport urljoin from \"url-join\";\nimport moment from \"moment\";\nimport config from \"../../../data/SiteConfig\";\n\nclass SEO extends Component {\n  render() {\n    const { postNode, postPath, postSEO } = this.props;\n    let title;\n    let description;\n    let image;\n    let postURL;\n\n    if (postSEO) {\n      const postMeta = postNode.frontmatter;\n      ({ title } = postMeta);\n      description = postMeta.description\n        ? postMeta.description\n        : postNode.excerpt;\n      image = postMeta.cover;\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\n    } else {\n      title = config.siteTitle;\n      description = config.siteDescription;\n      image = config.siteLogo;\n    }\n\n    const getImagePath = (imageURI) => {\n      if (\n        !imageURI.match(\n          `(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]`\n        )\n      )\n        return urljoin(config.siteUrl, config.pathPrefix, imageURI);\n\n      return imageURI;\n    };\n\n    const getPublicationDate = () => {\n      if (!postNode) return null;\n\n      if (!postNode.frontmatter) return null;\n\n      if (!postNode.frontmatter.date) return null;\n\n      return moment(postNode.frontmatter.date, config.dateFromFormat).toDate();\n    };\n\n    image = getImagePath(image);\n\n    const datePublished = getPublicationDate();\n\n    const authorJSONLD = {\n      \"@type\": \"Person\",\n      name: config.userName,\n      email: config.userEmail,\n      address: config.userLocation,\n    };\n\n    const logoJSONLD = {\n      \"@type\": \"ImageObject\",\n      url: getImagePath(config.siteLogo),\n    };\n\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix);\n    const schemaOrgJSONLD = [\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"WebSite\",\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\n      },\n    ];\n    if (postSEO) {\n      schemaOrgJSONLD.push(\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          itemListElement: [\n            {\n              \"@type\": \"ListItem\",\n              position: 1,\n              item: {\n                \"@id\": postURL,\n                name: title,\n                image,\n              },\n            },\n          ],\n        },\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BlogPosting\",\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\n          headline: title,\n          image: { \"@type\": \"ImageObject\", url: image },\n          author: authorJSONLD,\n          publisher: {\n            ...authorJSONLD,\n            \"@type\": \"Organization\",\n            logo: logoJSONLD,\n          },\n          datePublished,\n          description,\n        }\n      );\n    }\n    return (\n      <Helmet>\n        {/* General tags */}\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaOrgJSONLD)}\n        </script>\n\n        {/* OpenGraph tags */}\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n        <meta\n          property=\"fb:app_id\"\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\n        />\n\n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta\n          name=\"twitter:creator\"\n          content={config.userTwitter ? config.userTwitter : \"\"}\n        />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    );\n  }\n}\n\nexport default SEO;\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../layout\";\nimport PostListing from \"../components/PostListing\";\nimport SEO from \"../components/SEO\";\nimport config from \"../../data/SiteConfig\";\n\nclass Index extends React.Component {\n  render() {\n    const postEdges = this.props.data.allMarkdownRemark.edges;\n    return (\n      <Layout location={this.props.location} title=\"Home\">\n        <div className=\"index-container\">\n          <Helmet>\n            <title>{config.siteTitle}</title>\n            <link rel=\"canonical\" href={`${config.siteUrl}`} />\n          </Helmet>\n          <SEO postEdges={postEdges} />\n          <PostListing postEdges={postEdges} />\n        </div>\n      </Layout>\n    );\n  }\n}\n\nexport default Index;\n\nexport const pageQuery = graphql`\n  query IndexQuery {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [fields___date], order: DESC }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            date\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover\n            date\n          }\n        }\n      }\n    }\n  }\n`;\n","require(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\n(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();\n})('urljoin', this, function () {\n  function normalize(strArray) {\n    var resultArray = [];\n\n    if (strArray.length === 0) {\n      return '';\n    }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    } // If the first part is a plain protocol, we combine it with the next part.\n\n\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    } // There must be two or three slashes in the file protocol, two slashes in anything else.\n\n\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') {\n        continue;\n      }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n    }\n\n    var str = resultArray.join('/'); // Each input component is now separated by a single slash except the possible first plain protocol part.\n    // remove trailing slash before parameters or hash\n\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1'); // replace ? in parameters with &\n\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n});","'use strict';\n\nexports.__esModule = true;\nexports.MediaOverlay = exports.Media = undefined;\n\nvar _Media2 = require('./Media');\n\nvar _Media3 = _interopRequireDefault(_Media2);\n\nvar _MediaOverlay2 = require('./MediaOverlay');\n\nvar _MediaOverlay3 = _interopRequireDefault(_MediaOverlay2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nexports.default = _Media3.default;\nexports.Media = _Media3.default;\nexports.MediaOverlay = _MediaOverlay3.default;","import React, { Component } from \"react\";\nimport Card from \"react-md/lib/Cards/Card\";\nimport CardTitle from \"react-md/lib/Cards/CardTitle\";\nimport Button from \"react-md/lib/Buttons\";\nimport Avatar from \"react-md/lib/Avatars\";\nimport CardText from \"react-md/lib/Cards/CardText\";\nimport FontIcon from \"react-md/lib/FontIcons\";\nimport { Link } from \"gatsby\";\nimport moment from \"moment\";\nimport Media, { MediaOverlay } from \"react-md/lib/Media\";\nimport PostTags from \"../PostTags\";\nimport PostCover from \"../PostCover\";\nimport config from \"../../../data/SiteConfig\";\nimport \"./PostPreview.scss\";\n\nclass PostPreview extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mobile: true\n    };\n    this.handleResize = this.handleResize.bind(this);\n  }\n  componentDidMount() {\n    this.handleResize();\n    window.addEventListener(\"resize\", this.handleResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  }\n\n  handleResize() {\n    if (window.innerWidth >= 640) {\n      this.setState({ mobile: false });\n    } else {\n      this.setState({ mobile: true });\n    }\n  }\n  render() {\n    const { postInfo } = this.props;\n    const { mobile } = this.state;\n    const expand = mobile;\n    /* eslint no-undef: \"off\" */\n    const coverHeight = mobile ? 162 : 225;\n    return (\n      <Card key={postInfo.path} raise className=\"md-grid md-cell md-cell--12\">\n        <Link style={{ textDecoration: \"none\" }} to={postInfo.path}>\n          <Media style={{ height: coverHeight, paddingBottom: \"0px\" }}>\n            <PostCover postNode={postInfo} coverHeight={coverHeight} />\n            <MediaOverlay>\n              <CardTitle title={postInfo.title}>\n                <Button raised secondary className=\"md-cell--right\">\n                  Read\n                </Button>\n              </CardTitle>\n            </MediaOverlay>\n          </Media>\n        </Link>\n        <CardTitle\n          expander={expand}\n          avatar={<Avatar icon={<FontIcon iconClassName=\"fa fa-calendar\" />} />}\n          title={`Published on ${moment(postInfo.date).format(\n            config.dateFormat\n          )}`}\n          subtitle={`${postInfo.timeToRead} min read`}\n        />\n\n        <CardText expandable={expand}>\n          {postInfo.excerpt}\n          <PostTags tags={postInfo.tags} />\n        </CardText>\n      </Card>\n    );\n  }\n}\n\nexport default PostPreview;\n","import React from \"react\";\nimport PostPreview from \"../PostPreview\";\n\nclass PostListing extends React.Component {\n  getPostList() {\n    const postList = [];\n    this.props.postEdges.forEach(postEdge => {\n      postList.push({\n        path: postEdge.node.fields.slug,\n        tags: postEdge.node.frontmatter.tags,\n        cover: postEdge.node.frontmatter.cover,\n        title: postEdge.node.frontmatter.title,\n        date: postEdge.node.fields.date,\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead\n      });\n    });\n    return postList;\n  }\n  render() {\n    const postList = this.getPostList();\n    return (\n      <div className=\"md-grid md-grid--no-spacing md-cell--middle\">\n        <div className=\"md-grid md-cell--8 mobile-fix\">\n          {postList.map(post => (\n            <PostPreview key={post.title} postInfo={post} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PostListing;\n"],"sourceRoot":""}